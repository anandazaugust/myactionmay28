name: tflogin
on: 
  workflow_dispatch:
  workflow_call:
    
   inputs: 
      choose-env: 
       description: test
       required: true
       type: string
       default: dev
       
permissions:
 id-token: write
 contents: read
# env: 
#  TF_API_TOKEN: "Spz6wTWIrCn5Gg.atlasv1.NHLeDwipIWaGeScczJwYis5tCmoVFEjf6Tb23XzhQAZ8NOdFNdz8JHJKcyqy8EJb7y8"
jobs: 
  devuatb: 
   runs-on: ubuntu-latest
   environment: dev
   steps:
    

    #  - name: Azure login
    #    uses: azure/login@v2
    #    with:
    #       # client-id: ${{ secrets.client_id_azure}}
    #       client-id: "3071f7cd-0553-4cd6-8303-d467147aafcc"
    #       tenant-id: "17a09c66-f406-4897-8b24-51f5313623dc"
    #       subscription-id: "6e54aa79-9b0b-40ed-ae27-91fdffa0a565"

     - name: get keyvault secret  
       id: access_token_id
       run: |
            # value1=$(az keyvault secret show --name test --vault-name ibo-rg-kv1 --query value -o tsv)
            # echo "value1=$(az keyvault secret show --name test --vault-name ibo-rg-kv1 --query value -o tsv)"
            # echo "Secret Value: $value1"
            # echo "KVSECRET_VALUE=$value1" >> $GITHUB_ENV
            # echo "$value1" >> $GITHUB_ENV
            echo "mytoken = $value1" >> $GITHUB_ENV
            # echo "mytoken = $value1" >> $GITHUB_OUTPUT
            echo "action_state=yellow" >> "$GITHUB_ENV"
            echo "secret=blow" >> "$GITHUB_ENV"
     - name: show stuff
       run: echo "ehllo"
       env:
        test: test

     
       
      #  run: |
      #   value1=$(az keyvault secret show --name test --vault-name ibo-rg-kv1 --query value -o tsv)
      #   # echo "value1=$(az keyvault secret show --name test --vault-name ibo-rg-kv1 --query value -o tsv)"
      #   # echo "Secret Value: $value1"
      #   # echo "KVSECRET_VALUE=$value1" >> $GITHUB_ENV
      #   # echo "$value1" >> $GITHUB_ENV
      #   echo "mytoken = $value1" >> $GITHUB_ENV
      #   # echo "mytoken = $value1" >> $GITHUB_OUTPUT

     - name: Checkout
       uses: actions/checkout@v3

    #  - name: set terraform token
    #    run: |
    #       mkdir ${HOME}/.terraform.d
    #       cat > ${HOME}/.terraform.d/credentials.tfrc.json << EOF
    #       {
    #         "credentials": {
    #           "app.terraform.io": {
    #             "token": "Ze9M8VARmAPl5g.atlasv1.Zx3mjiDYGB26Np29CaMjAYqLIchVAtCrYVHkEh6mwYpNLzyzy6x90UH68r4OkbeLuMo"
    #           }
    #         }
    #       }
    #       EOF

     
       

     - name: show secret  
       working-directory: ./terraform
       env: 
        ARM_TENANT_ID: "17a09c66-f406-4897-8b24-51f5313623dc"
        ARM_CLIENT_ID      : "6589b09f-b35e-4dd2-86fc-d7a757d9f72e"
        ARM_CLIENT_SECRET   : "NJY8Q~FE5ufe-fbK4Dlb6tzT8WNA9pvbl-nYlc-3" 
        TF_API_TOKEN: "Spz6wTWIrCn5Gg.atlasv1.NHLeDwipIWaGeScczJwYis5tCmoVFEjf6Tb23XzhQAZ8NOdFNdz8JHJKcyqy8EJb7y8"
        # TF_TOKEN_app_terraform_io : "XoE5pHoC0VfquA.atlasv1.RvvIQcRgob7u85OoUybbpiytcuaE7GtUMaGjR8o69SeULmBPfnMg3xWyR3CS8spZxzE"

       run: |
        echo "$mytoken"
        echo "$action_state"
        terraform init
        terraform validate
        terraform plan
        terraform apply -auto-approve
       
       
      #  run: |
       
      #   echo "$mytoken"

    #  - name: set terraform token
    #    run: |
    #       mkdir ${HOME}/.terraform.d
    #       cat > ${HOME}/.terraform.d/credentials.tfrc.json << EOF
    #       {
    #         "credentials": {
    #           "app.terraform.io": {
    #             "token": ${{steps.access_token_id.outputs.value2}}
    #           }
    #         }
    #       }
    #       EOF

 